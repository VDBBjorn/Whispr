// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pigeon.IntegrationTests.Tests.Data;

#nullable disable

namespace Pigeon.IntegrationTests.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250318211641_Add outbox")]
    partial class Addoutbox
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pigeon.EntityFrameworkCore.Entities.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationTopicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedAtUtc", "CreatedAtUtc");

                    b.ToTable("OutboxMessage", "Application");
                });

            modelBuilder.Entity("Pigeon.IntegrationTests.Tests.Data.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Product", "Application");
                });

            modelBuilder.Entity("Pigeon.EntityFrameworkCore.Entities.OutboxMessage", b =>
                {
                    b.OwnsOne("Pigeon.SerializedEnvelope", "Envelope", b1 =>
                        {
                            b1.Property<long>("OutboxMessageId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CorrelationId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<DateTimeOffset?>("DeferredUntil")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("MessageId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("MessageType")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.HasKey("OutboxMessageId");

                            b1.ToTable("OutboxMessage", "Application");

                            b1.WithOwner()
                                .HasForeignKey("OutboxMessageId");
                        });

                    b.Navigation("Envelope")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
